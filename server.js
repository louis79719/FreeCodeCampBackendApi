 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/api/getTime').get( function(req, res, next ){
  console.log('api/getTime');
  if( req.query.time ){
    console.log( "api gettime : time =  " + JSON.stringify( req.query.time ) );
    var date;
    if( parseInt( req.query.time ) )
    {
      var timeStamp = parseInt( req.query.time ) * 1000;
      console.log( "timestamp : " +  timeStamp );
      date = new Date( timeStamp );
    }
    else{
      date = new Date(req.query.time);
    }
    var dateObject = {}
    dateObject.unix = date.getTime() / 1000
    dateObject.natural =  date.toString()
    res.type('json').send( JSON.stringify( dateObject ) )
  }
  else
  {
    console.log("api gettime : parameter invalid")
    res.type('txt').send( "api gettime : parameter invalid" )
  }
})
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

